{"version":3,"sources":["GameManagaer.js"],"names":["GAME_CONFIG","ROW","COL","MARGIN","cc","Class","extends","Component","properties","mainGame","Node","block","Prefab","cell","score","Label","recored","loseLayout","_arrBlockPos","_arrBlock","onLoad","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","initObj","node","string","initCell","initBlock","y","height","x","width","index","row","col","status","newCell","instantiate","setParent","setPosition","v2","loop","i","arrPos","getRandomInt","newBlock","push","error","event","keyCode","macro","KEY","left","right","checkRow","up","down","checkCol","value","min","max","Math","ceil","floor","random"],"mappings":";;;;;;AACA,IAAMA,cAAc;AAChBC,SAAK,CADW;AAEhBC,SAAK,CAFW;AAGhBC,YAAQ,EAHQ,CAGL;AAHK,CAApB;AAKAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAUL,GAAGM,IADL;AAERC,eAAOP,GAAGQ,MAFF;AAGRC,cAAMT,GAAGQ,MAHD;AAIRE,eAAOV,GAAGW,KAJF;AAKRC,iBAASZ,GAAGW,KALJ;AAMRE,oBAAYb,GAAGM,IANP;AAORQ,sBAAc,EAPN;AAQRC,mBAAW;AARH,KAHP;;AAcLC,UAdK,oBAcI;AACLhB,WAAGiB,WAAH,CAAeC,EAAf,CAAkBlB,GAAGmB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKC,SAA1D,EAAqE,IAArE;AACA,aAAKC,OAAL;AACA,aAAKb,KAAL,CAAWc,IAAX,CAAgBC,MAAhB,GAAyB,CAAzB;AACH,KAlBI;AAoBLF,WApBK,qBAoBK;AACN,aAAKG,QAAL;AACA,aAAKC,SAAL,CAAe,CAAf;AACH,KAvBI;AAyBLD,YAzBK,sBAyBM;AACP,YAAIE,IAAI,KAAKvB,QAAL,CAAcwB,MAAd,GAAuB,CAAvB,GAA2BjC,YAAYG,MAA/C;AAAA,YACI+B,IAAI,KAAKzB,QAAL,CAAc0B,KAAd,GAAsB,CAAC,CAAvB,GAA2BnC,YAAYG,MAD/C;AAEA,YAAIiC,QAAQ,CAAZ;AACA,aAAI,IAAIC,MAAM,CAAd,EAAiBA,MAAMrC,YAAYC,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3C,iBAAKnB,YAAL,CAAkBmB,GAAlB,IAAyB,EAAzB;AACA,iBAAI,IAAIC,MAAM,CAAd,EAAiBA,MAAMtC,YAAYE,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3C,qBAAKpB,YAAL,CAAkBmB,GAAlB,EAAuBC,GAAvB,IAA8B,EAACJ,IAAD,EAAIF,IAAJ,EAAOO,QAAQ,KAAf,EAAsBH,OAAOA,OAA7B,EAA9B,CAD2C,CAC0B;AACrE,qBAAKI,OAAL,GAAepC,GAAGqC,WAAH,CAAe,KAAK5B,IAApB,CAAf,CAF2C,CAED;AAC1C,qBAAK2B,OAAL,CAAaE,SAAb,CAAuB,KAAKjC,QAA5B;AACA,qBAAK+B,OAAL,CAAaG,WAAb,CAAyBvC,GAAGwC,EAAH,CAAMV,CAAN,EAASF,CAAT,CAAzB;AACAE,qBAAK,KAAKM,OAAL,CAAaL,KAAb,GAAqBnC,YAAYG,MAAtC;AACH;AACD6B,iBAAK,KAAKQ,OAAL,CAAaP,MAAb,GAAsBjC,YAAYG,MAAvC;AACA+B,gBAAI,KAAKzB,QAAL,CAAc0B,KAAd,GAAsB,CAAC,CAAvB,GAA2BnC,YAAYG,MAA3C;AACH;AACJ,KAzCI;AA2CL4B,aA3CK,qBA2CKc,IA3CL,EA2CW;AACZ,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAID,IAAnB,EAAyBC,GAAzB,EAA8B;AAC1B,gBAAIC,SAAS,KAAK7B,YAAL,CAAkB,KAAK8B,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAlB,EAA2C,KAAKA,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAA3C,CAAb;AACA,gBAAG,CAACD,OAAOR,MAAX,EAAmB;AACf,oBAAIU,WAAW7C,GAAGqC,WAAH,CAAe,KAAK9B,KAApB,CAAf;AACAsC,yBAASP,SAAT,CAAmB,KAAKjC,QAAxB;AACAwC,yBAASN,WAAT,CAAqBvC,GAAGwC,EAAH,CAAMG,OAAOb,CAAb,EAAgBa,OAAOf,CAAvB,CAArB;AACAe,uBAAOR,MAAP,GAAgB,IAAhB;AACA,qBAAKpB,SAAL,CAAe+B,IAAf,CAAoB,EAACvC,OAAOsC,QAAR,EAAkBb,OAAOW,OAAOX,KAAhC,EAApB;AACH,aAND,MAMO;AACH,qBAAKL,SAAL,CAAe,CAAf;AACH;AACJ;AACD3B,WAAG+C,KAAH,CAAS,KAAKhC,SAAd;AACH,KAzDI;AA2DLO,aA3DK,qBA2DK0B,KA3DL,EA2DY;AACb,gBAAOA,MAAMC,OAAb;AACI,iBAAKjD,GAAGkD,KAAH,CAASC,GAAT,CAAaC,IAAlB;AACA,iBAAKpD,GAAGkD,KAAH,CAASC,GAAT,CAAaE,KAAlB;AACI,qBAAKC,QAAL,CAAcN,MAAMC,OAApB;AACA;AACJ,iBAAKjD,GAAGkD,KAAH,CAASC,GAAT,CAAaI,EAAlB;AACA,iBAAKvD,GAAGkD,KAAH,CAASC,GAAT,CAAaK,IAAlB;AACI,qBAAKC,QAAL,CAAcT,MAAMC,OAApB;AACA;AARR,SASC;AACJ,KAtEI;AAwELK,YAxEK,oBAwEII,KAxEJ,EAwEW;AACZ,aAAI,IAAIzB,MAAM,CAAd,EAAiBA,MAAMrC,YAAYC,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3C,iBAAI,IAAIC,MAAM,CAAd,EAAiBA,MAAMtC,YAAYE,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3C,oBAAG,OAAO,KAAKnB,SAAL,CAAemB,GAAf,EAAoB3B,KAA3B,IAAoC,WAAvC,EAAoD;AAChDP,uBAAG+C,KAAH,CAAS,IAAT;AACH,iBAFD,MAGK;AACD/C,uBAAG+C,KAAH,CAAS,KAAKhC,SAAL,CAAemB,GAAf,EAAoB3B,KAA7B;AACH;AACJ;AACJ;AACJ,KAnFI;AAqFLkD,YArFK,oBAqFIC,KArFJ,EAqFW;AACZ,aAAI,IAAIzB,MAAM,CAAd,EAAiBA,MAAMrC,YAAYC,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3C,iBAAI,IAAIC,MAAM,CAAd,EAAiBA,MAAMtC,YAAYE,GAAnC,EAAwCoC,KAAxC,EAA+C;AAC3ClC,mBAAG+C,KAAH,CAAS,KAAKjC,YAAL,CAAkBoB,GAAlB,EAAuBD,GAAvB,CAAT;AACH;AACJ;AACJ,KA3FI;AA6FLW,gBA7FK,wBA6FQe,GA7FR,EA6FaC,GA7Fb,EA6FkB;AACnBD,cAAME,KAAKC,IAAL,CAAUH,GAAV,CAAN;AACAC,cAAMC,KAAKE,KAAL,CAAWH,GAAX,CAAN;AACA,eAAOC,KAAKE,KAAL,CAAWF,KAAKG,MAAL,MAAiBJ,MAAMD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH;AAjGI,CAAT","file":"GameManagaer.js","sourceRoot":"../../../../assets/Scripts","sourcesContent":["\nconst GAME_CONFIG = {\n    ROW: 4,\n    COL: 4,\n    MARGIN: 16 //results from: (this.mainGame.width - this.block.width * GAME_CONFIG.ROW) / 5;\n}\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        mainGame: cc.Node,\n        block: cc.Prefab,\n        cell: cc.Prefab,\n        score: cc.Label,\n        recored: cc.Label,\n        loseLayout: cc.Node, \n        _arrBlockPos: [],\n        _arrBlock: []\n    },\n\n    onLoad() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        this.initObj();\n        this.score.node.string = 0;\n    },\n\n    initObj() {\n        this.initCell();\n        this.initBlock(2);\n    },\n\n    initCell() {\n        let y = this.mainGame.height / 2 - GAME_CONFIG.MARGIN,\n            x = this.mainGame.width / -2 + GAME_CONFIG.MARGIN;\n        let index = 0;    \n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            this._arrBlockPos[row] = [];\n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                this._arrBlockPos[row][col] = {x, y, status: false, index: index++}; //ADD POSITION VALUE\n                this.newCell = cc.instantiate(this.cell); //CREATE PREAFAB CELL\n                this.newCell.setParent(this.mainGame);\n                this.newCell.setPosition(cc.v2(x, y));\n                x += this.newCell.width + GAME_CONFIG.MARGIN;\n            }\n            y -= this.newCell.height + GAME_CONFIG.MARGIN;\n            x = this.mainGame.width / -2 + GAME_CONFIG.MARGIN;\n        };\n    },\n    \n    initBlock(loop) {\n        for(let i = 0; i < loop; i++) {\n            let arrPos = this._arrBlockPos[this.getRandomInt(0, 3)][this.getRandomInt(0, 3)];\n            if(!arrPos.status) {\n                let newBlock = cc.instantiate(this.block);\n                newBlock.setParent(this.mainGame);\n                newBlock.setPosition(cc.v2(arrPos.x, arrPos.y));\n                arrPos.status = true;\n                this._arrBlock.push({block: newBlock, index: arrPos.index});\n            } else {\n                this.initBlock(1);\n            }\n        }\n        cc.error(this._arrBlock);\n    },\n\n    onKeyDown(event) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.right:\n                this.checkRow(event.keyCode);\n                break;\n            case cc.macro.KEY.up:\n            case cc.macro.KEY.down:\n                this.checkCol(event.keyCode);               \n                break;\n        };\n    },\n\n    checkRow(value) {\n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                if(typeof this._arrBlock[col].block == \"undefined\") {\n                    cc.error(\"cc\");\n                }\n                else {\n                    cc.error(this._arrBlock[col].block);\n                }\n            }\n        }\n    },\n\n    checkCol(value) {\n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                cc.error(this._arrBlockPos[col][row]);\n            }\n        }\n    },\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }, \n});\n"]}