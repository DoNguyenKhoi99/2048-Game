{"version":3,"sources":["../../../../assets/Scripts/assets/Scripts/GameManagaer.js"],"names":["GAME_CONFIG","ROW","COL","MARGIN","cc","Class","extends","Component","properties","mainGame","Node","block","Prefab","cell","score","Label","recored","loseLayout","_arrBlockPos","onLoad","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","initObj","node","string","initCell","initBlock","y","height","x","width","row","col","status","newCell","instantiate","setParent","setPosition","v2","value","i","arrPos","getRandomInt","newBlock","error","event","keyCode","macro","KEY","left","right","checkRow","up","down","checkCol","min","max","Math","ceil","floor","random"],"mappings":"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","file":"GameManagaer.js","sourceRoot":"../../../../assets/Scripts","sourcesContent":["\nconst GAME_CONFIG = {\n    ROW: 4,\n    COL: 4,\n    MARGIN: 16 //results from: (this.mainGame.width - this.block.width * GAME_CONFIG.ROW) / 5;\n}\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        mainGame: cc.Node,\n        block: cc.Prefab,\n        cell: cc.Prefab,\n        score: cc.Label,\n        recored: cc.Label,\n        loseLayout: cc.Node, \n        _arrBlockPos: [],\n    },\n\n    onLoad() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        this.initObj();\n        this.score.node.string = 0;\n    },\n\n    initObj() {\n        this.initCell();\n        this.initBlock(2);\n    },\n\n    initCell() {\n        let y = this.mainGame.height / 2 - GAME_CONFIG.MARGIN;\n        let x = this.mainGame.width / -2 + GAME_CONFIG.MARGIN;\n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            this._arrBlockPos[row] = [];\n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                this._arrBlockPos[row][col] = {x, y, status: false}; //ADD POSITION VALUE\n                this.newCell = cc.instantiate(this.cell); //CREATE PREAFAB CELL\n                this.newCell.setParent(this.mainGame);\n                this.newCell.setPosition(cc.v2(x, y));\n                x += this.newCell.width + GAME_CONFIG.MARGIN;\n            }\n            y -= this.newCell.height + GAME_CONFIG.MARGIN;\n            x = this.mainGame.width / -2 + GAME_CONFIG.MARGIN;\n        };\n    },\n    \n    initBlock(value) {\n        for(let i = 0; i < value; i++) {\n            let arrPos = this._arrBlockPos[this.getRandomInt(0, 3)][this.getRandomInt(0, 3)];\n            if(!arrPos.status) {\n                this.newBlock = cc.instantiate(this.block);\n                this.newBlock.setParent(this.mainGame);\n                this.newBlock.setPosition(cc.v2(arrPos.x, arrPos.y));\n                arrPos.status = true;\n            } else {\n                this.initBlock(1);\n            }\n        }\n        cc.error(this.newBlock)\n    },\n\n    onKeyDown(event) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.right:\n                this.checkRow(event.keyCode);\n                break;\n            case cc.macro.KEY.up:\n            case cc.macro.KEY.down:\n                this.checkCol(event.keyCode);               \n                break;\n        };\n    },\n\n    checkRow(value) {\n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                cc.error(this._arrBlockPos[row][col]);\n            }\n        }\n    },\n\n    checkCol(value) {\n        for(let row = 0; row < GAME_CONFIG.ROW; row++) {\n            \n            for(let col = 0; col < GAME_CONFIG.COL; col++) {\n                cc.error(this._arrBlockPos[col][row]);\n            }\n        }\n    },\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }, \n});\n"]}